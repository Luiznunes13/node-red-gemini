[
    {
        "id": "mcp_flow_all_gpio",
        "type": "tab",
        "label": "MCP GPIO - Todas as GPIOs",
        "disabled": false,
        "info": "API MCP completa para controlar todas as GPIOs do Raspberry Pi"
    },
    {
        "id": "http_mcp_control",
        "type": "http in",
        "z": "mcp_flow_all_gpio",
        "name": "POST /mcp/gpio/control",
        "url": "/mcp/gpio/control",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 100,
        "wires": [["mcp_controller"]]
    },
    {
        "id": "http_mcp_status",
        "type": "http in",
        "z": "mcp_flow_all_gpio",
        "name": "GET /mcp/gpio/status",
        "url": "/mcp/gpio/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 160,
        "wires": [["get_status"]]
    },
    {
        "id": "http_mcp_tools",
        "type": "http in",
        "z": "mcp_flow_all_gpio",
        "name": "GET /mcp/tools",
        "url": "/mcp/tools",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [["list_tools"]]
    },
    {
        "id": "mcp_controller",
        "type": "function",
        "z": "mcp_flow_all_gpio",
        "name": "MCP GPIO Controller",
        "func": "const body = msg.payload;\nconst tool = body.tool || body.name;\nconst params = body.params || body.arguments || {};\nconst validGPIOs = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27];\n\nif (tool === 'control_gpio') {\n    const pin = parseInt(params.pin);\n    const state = params.state;\n    \n    if (!pin || !validGPIOs.includes(pin)) {\n        msg.statusCode = 400;\n        msg.payload = {\n            error: 'Invalid GPIO pin',\n            valid_pins: validGPIOs\n        };\n        return [null, msg];\n    }\n    \n    let value;\n    if (state === 'on' || state === true || state === 1 || state === '1') {\n        value = 1;\n    } else if (state === 'off' || state === false || state === 0 || state === '0') {\n        value = 0;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {error: 'Invalid state. Use: on/off, true/false, 1/0'};\n        return [null, msg];\n    }\n    \n    let gpioStates = global.get('gpio_states') || {};\n    gpioStates[pin] = {\n        state: value === 1 ? 'on' : 'off',\n        value: value,\n        timestamp: new Date().toISOString()\n    };\n    global.set('gpio_states', gpioStates);\n    \n    msg.gpio_pin = pin;\n    msg.gpio_value = value;\n    msg.result = {\n        tool: 'control_gpio',\n        result: {\n            success: true,\n            gpio: pin,\n            state: gpioStates[pin].state,\n            value: value,\n            timestamp: gpioStates[pin].timestamp\n        }\n    };\n    return [msg, null];\n    \n} else if (tool === 'control_multiple_gpio') {\n    const gpios = params.gpios || [];\n    \n    if (!Array.isArray(gpios) || gpios.length === 0) {\n        msg.statusCode = 400;\n        msg.payload = {error: 'gpios must be a non-empty array'};\n        return [null, msg];\n    }\n    \n    let gpioStates = global.get('gpio_states') || {};\n    let results = [];\n    let messages = [];\n    \n    for (let gpio of gpios) {\n        const pin = parseInt(gpio.pin);\n        if (!validGPIOs.includes(pin)) continue;\n        \n        const value = (gpio.state === 'on' || gpio.state === true || gpio.state === 1 || gpio.state === '1') ? 1 : 0;\n        gpioStates[pin] = {\n            state: value === 1 ? 'on' : 'off',\n            value: value,\n            timestamp: new Date().toISOString()\n        };\n        \n        results.push({\n            gpio: pin,\n            state: gpioStates[pin].state,\n            value: value,\n            success: true\n        });\n        \n        messages.push({\n            payload: value,\n            gpio_pin: pin\n        });\n    }\n    \n    global.set('gpio_states', gpioStates);\n    \n    msg.payload = {\n        tool: 'control_multiple_gpio',\n        result: {\n            success: true,\n            total: results.length,\n            gpios: results,\n            timestamp: new Date().toISOString()\n        }\n    };\n    msg.batch_messages = messages;\n    return [null, null, msg];\n    \n} else {\n    msg.statusCode = 400;\n    msg.payload = {error: 'Unknown tool: ' + tool};\n    return [null, msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [["gpio_router", "format_response"], ["error_response"], ["batch_handler", "batch_response"]]
    },
    {
        "id": "gpio_router",
        "type": "function",
        "z": "mcp_flow_all_gpio",
        "name": "GPIO Router",
        "func": "const pin = msg.gpio_pin;\nconst value = msg.gpio_value;\n\nif (!pin) return null;\n\nmsg.payload = value;\nmsg.topic = 'gpio/' + pin;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [["gpio_output"]]
    },
    {
        "id": "gpio_output",
        "type": "rpi-gpio out",
        "z": "mcp_flow_all_gpio",
        "name": "GPIO Output (Dynamic)",
        "pin": "",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "format_response",
        "type": "function",
        "z": "mcp_flow_all_gpio",
        "name": "Format Response",
        "func": "msg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [["http_response"]]
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "mcp_flow_all_gpio",
        "name": "Success Response",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 120,
        "wires": []
    },
    {
        "id": "error_response",
        "type": "http response",
        "z": "mcp_flow_all_gpio",
        "name": "Error Response",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 160,
        "wires": []
    },
    {
        "id": "batch_handler",
        "type": "function",
        "z": "mcp_flow_all_gpio",
        "name": "Batch GPIO Handler",
        "func": "const messages = msg.batch_messages || [];\n\nfor (let message of messages) {\n    const pin = message.gpio_pin;\n    const value = message.payload;\n    \n    node.send({\n        payload: value,\n        topic: 'gpio/' + pin,\n        gpio_pin: pin\n    });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 200,
        "wires": [["gpio_output"]]
    },
    {
        "id": "batch_response",
        "type": "http response",
        "z": "mcp_flow_all_gpio",
        "name": "Batch Response",
        "statusCode": "200",
        "headers": {},
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "get_status",
        "type": "function",
        "z": "mcp_flow_all_gpio",
        "name": "Get GPIO Status",
        "func": "let gpioStates = global.get('gpio_states') || {};\n\nmsg.payload = {\n    tool: 'gpio_status',\n    result: {\n        pin_mode: 'BCM',\n        available_pins: [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],\n        active_pins: Object.keys(gpioStates).map(p => parseInt(p)),\n        states: gpioStates,\n        timestamp: new Date().toISOString()\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [["status_response"]]
    },
    {
        "id": "status_response",
        "type": "http response",
        "z": "mcp_flow_all_gpio",
        "name": "Status Response",
        "statusCode": "200",
        "headers": {},
        "x": 610,
        "y": 160,
        "wires": []
    },
    {
        "id": "list_tools",
        "type": "function",
        "z": "mcp_flow_all_gpio",
        "name": "List MCP Tools",
        "func": "msg.payload = {\n    tools: [\n        {\n            name: 'control_gpio',\n            description: 'Control individual Raspberry Pi GPIO pin (BCM mode)',\n            parameters: {\n                pin: {\n                    type: 'number',\n                    description: 'GPIO pin number (2-27 BCM)',\n                    required: true\n                },\n                state: {\n                    type: 'string',\n                    description: 'Desired state: on/off, true/false, 1/0',\n                    required: true,\n                    enum: ['on', 'off', 'true', 'false', '1', '0']\n                }\n            }\n        },\n        {\n            name: 'control_multiple_gpio',\n            description: 'Control multiple GPIO pins in a single request',\n            parameters: {\n                gpios: {\n                    type: 'array',\n                    description: 'Array of {pin, state} objects',\n                    required: true,\n                    items: {\n                        type: 'object',\n                        properties: {\n                            pin: {type: 'number'},\n                            state: {type: 'string'}\n                        }\n                    }\n                }\n            }\n        },\n        {\n            name: 'gpio_status',\n            description: 'Get current status of all GPIO pins',\n            parameters: {}\n        }\n    ]\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [["tools_response"]]
    },
    {
        "id": "tools_response",
        "type": "http response",
        "z": "mcp_flow_all_gpio",
        "name": "Tools Response",
        "statusCode": "200",
        "headers": {},
        "x": 600,
        "y": 220,
        "wires": []
    }
]